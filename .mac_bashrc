#Show/hide hidden files in Finder (persistant toggle)
#TODO: combine into a single toggleHiddenFiles command
alias showHiddenFiles='defaults write com.apple.finder AppleShowAllFiles YES; killall Finder /System/Library/CoreServices/Finder.app'
alias hideHiddenFiles='defaults write com.apple.finder AppleShowAllFiles NO; killall Finder /System/Library/CoreServices/Finder.app'

# github.com/mathiasbynens
# I can pull out all these defaults (and whatever others I use) into a one-time run script for new Macs
# Disable smart quotes as they’re annoying when typing code
defaults write NSGlobalDomain NSAutomaticQuoteSubstitutionEnabled -bool false

# Finder: show all filename extensions
defaults write NSGlobalDomain AppleShowAllExtensions -bool true

# Finder: show path bar
defaults write com.apple.finder ShowPathbar -bool true

# Finder: allow text selection in Quick Look
defaults write com.apple.finder QLEnableTextSelection -bool true

# Don’t automatically rearrange Spaces based on most recent use
defaults write com.apple.dock mru-spaces -bool false

# Prevent Safari from opening ‘safe’ files automatically after downloading
defaults write com.apple.Safari AutoOpenSafeDownloads -bool false

# Enable “focus follows mouse” for Terminal.app and all X11 apps
# i.e. hover over a window and start typing in it without clicking first
defaults write com.apple.terminal FocusFollowsMouse -bool true
defaults write org.x.X11 wm_ffm -bool true

# Don’t display the annoying prompt when quitting iTerm
defaults write com.googlecode.iterm2 PromptOnQuit -bool false

# Allow installing Chrome user scripts via GitHub Gist or Userscripts.org
defaults write com.google.Chrome ExtensionInstallSources -array "https://gist.githubusercontent.com/" "http://userscripts.org/*"
defaults write com.google.Chrome.canary ExtensionInstallSources -array "https://gist.githubusercontent.com/" "http://userscripts.org/*"

# Hide/show all desktop icons 
alias hidedesktop="defaults write com.apple.finder CreateDesktop -bool false && killall Finder"
alias showdesktop="defaults write com.apple.finder CreateDesktop -bool true && killall Finder"

# Stuff I never really use but cannot delete either because of http://xkcd.com/530/
alias stfu="osascript -e 'set volume output muted true'"
alias pumpitup="osascript -e 'set volume 7'"

# Lock the screen (when going AFK)
alias afk="/System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend"
# /end github.com/mathiasbynens

# Need to update to a single if to check for gnu-coreutils and bring in all my aliases if that's available

#Use GNU realpath (GNU coreutils only; didn't use an if block b/c there is no BSD realpath)
alias realpath='grealpath'

if hash gls 2>/dev/null; then
	#Use GNU ls instead of BSD ls, if it's available
	alias ls='gls -hAF --color --group-directories-first'
else
	#If GNU ls (gls) isn't available, use this:
	alias ls='ls -hAFG'
fi
 
# Use GNU mkdir if available, otherwise emulate it
if hash gmkdir 2>/dev/null; then
	alias mkdir='gmkdir -pv'
else
	function GNU_mkdir_emulator {
		args="$@"

		if [[ $1 == "-p" || $2 == "-p" ]]; then
			p="-p"
		fi
		
		if [[ $1 == "-v" || $2 == "-v" ]]; then
			v="-v"
		fi

		mkdir $p "$@"
		if [ "$?" -eq 0 ]; then
			if [[ "$v" == "-v" && "$p" == "-p" ]]; then
				for arg in $args; do
					if [[ $arg =~ (\-v|\-p) ]]; then
						continue
					elif [[ $arg == *"/"* ]]; then
						SAVEIFS=$IFS
						IFS="/"

						read -a multi_dir <<< "$arg"
						fulldir=""

						IFS=$SAVEIFS
						for dir in ${multi_dir[@]}; do
							if [[ $fulldir != "" ]]; then 
								fulldir+="/$dir"
							else  
								fulldir+="$dir"
							fi
							echo "mkdir: created directory '$fulldir'"
						done
					else
						echo "mkdir: created directory '$arg'"	
					fi
				done
			fi
		fi
	}
	alias mkdir='GNU_mkdir_emulator'
fi

# Use GNU manpages (when available & appropriate) 
function select_proper_man {
#Single line version (consider aliases)
#alias man='_() { echo $1; man -M $(brew --prefix)/opt/coreutils/libexec/gnuman $1 1>/dev/null 2>&1;  if [ "$?" -eq 0 -a `type -t $1` == "alias" -a "`type $1 | cut -d\" \" -f5 | cut -c2`" == "g" ]; then man -M $(brew --prefix)/opt/coreutils/libexec/gnuman $1; else man $1; fi }; _'

#Single line version (assume all replaced)
#alias man='_() { echo $1; man -M $(brew --prefix)/opt/coreutils/libexec/gnuman $1 1>/dev/null 2>&1;  if [ "$?" -eq 0 ]; then man -M $(brew --prefix)/opt/coreutils/libexec/gnuman $1; else man $1; fi }; _'

#If you alias "groups" to something that's not "ggroups", this will probably give you the wrong man page
	echo $1
	cmd_type=`type -t $1`
	cmd_first_letter=`type $1 | cut -d" " -f5 | cut -c2`
	man -M $(brew --prefix)/opt/coreutils/libexec/gnuman $1 1>/dev/null 2>&1
	if [ "$?" -eq 0 -a "$cmd_type" == "alias" -a "$cmd_first_letter" == "g" ]; then 
		man -M $(brew --prefix)/opt/coreutils/libexec/gnuman $1 
	else
		/usr/bin/man $1
	fi 
}
alias man='select_proper_man'

#Enable stderred (use before a command to make stderr print red), if it's abavailable
stderred_lib="${HOME}/usr/share/stderred/libstderred.dylib"
if [ -f "$stderred_lib" ]; then
	alias stderred="DYLD_INSERT_LIBRARIES=$stderred_lib\${DYLD_INSERT_LIBRARIES:+:\$DYLD_INSERT_LIBRARIES}"
fi
