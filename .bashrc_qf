[[ "$-" != *i* ]] && return

# Use case-insensitive filename globbing
shopt -s nocaseglob
#
# Make bash append rather than overwrite the history on disk
shopt -s histappend

# Define to avoid flattening internal contents of tar files
COMP_TAR_INTERNAL_PATHS=1
#
# Uncomment to turn on programmable completion enhancements.
# Any completions you add in ~/.bash_completion are sourced last.
[[ -f /etc/bash_completion ]] && . /etc/bash_completion

# Don't put duplicate lines in the history.
if [[ ${HISTCONTROL} != *"ignoredups"* ]]; then
	export HISTCONTROL=$HISTCONTROL${HISTCONTROL+,}ignoredups
fi
#
# Ignore some controlling instructions
# HISTIGNORE is a colon-delimited list of patterns which should be excluded.
# The '&' is a special pattern which suppresses duplicate entries.
export HISTIGNORE=$'[ \t]*:&:[b]g:exit'
# export HISTIGNORE=$'[ \t]*:&:[fb]g:exit:ls' # Ignore the ls command as well
#
# History file
HISTFILESIZE=10000
HISTSIZE=10000
# Whenever displaying the prompt, write the previous line to disk
export PROMPT_COMMAND="history -a"

# Interactive operation...
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'
#
# Default to human readable figures
alias df='df -h'
alias du='du -h'
#
# Misc :)
# alias less='less -r'                          # raw control characters
alias whence='type -a'                        # where, of a sort
alias grep='grep --color'                     # show differences in colour
alias egrep='egrep --color=auto'              # show differences in colour
alias fgrep='fgrep --color=auto'              # show differences in colour
#
# Some shortcuts for different directory listings
export QUOTING_STYLE=literal # stop quoting multi-word items
alias ls='ls -ahF --color=tty'                 # classify files in colour
alias dir='ls --color=auto --format=vertical'
alias vdir='ls --color=auto --format=long'
alias ll='ls -l'                              # long list
alias la='ls -A'                              # all but . and ..
alias l='ls -CF --color=auto'                              #

[[ ":$PATH:" != *":${HOME}/bin:"* ]] && export PATH="${HOME}/bin:$PATH"
export VISUAL=vim
export EDITOR="$VISUAL"

# Pwd, but report if there is a difference between physical and logical location
#	maybe look into making this a builtin?
pwdiligent(){
	if [ "$1" == "-P" -o "$1" == "-L" ]; then
		\pwd "$1"
		return 0
	fi
	local logical
	local physical
	logical=`\pwd -L`
	physical=`\pwd -P`
	if [ "$physical" == "$logical" ]; then
		echo "$logical"
	else
		echo "Logical: $logical"
		echo "Physical: $physical"
	fi
}
alias pwd='pwdiligent'

fortune -s | cowsay

function readppt(){
# read the text from within powerpoint slides
# .pptx only (I think)
	unzip -qc "$1" ppt/slides/slide*.xml | grep -oP '(?<=\<a:t\>).*?(?=\</a:t\>)'
}

function highlight(){
	# TODO: make arg handling a bit more robust
	#	expand into full script
	#		either only use perl or detect faster (ack/ag) for use
	#			detect in configure? or makefile?
	#		support choosing color
	#		-c for column, -s for search
	#			default mode changed with configure? or makefile?
	#	consider spaces for column highlighting

	# TODO: add case insensitivity (by default)
	#	add option to re-enable case sensitivity

	if [ "$1" == "-c" ]; then
		column_number="$2"
		sed -e $'s| *[^ ]*|\033[1;33m&\033[0m|'"$column_number"
	else
		grep --color -iE "$1|$" "${@:2}"

		# Perl version
		# TODO: set up args for quick color changes via the perl version
		#perl -pe "s/$1/\e[1;31;43m$&\e[0m/g" # change 1 and 31 to change colors
	fi

	# References:
	# http://unix.stackexchange.com/a/367/50939 (grep highlight search)
	# http://unix.stackexchange.com/a/17308/50939 (perl highlight search)
	# http://unix.stackexchange.com/a/283047/50939 (sed highlight column)

	# Alternative full implementation (support for multi-color, multi-term)
	# http://stackoverflow.com/a/25357864/919057 
}

alias ..='cd ..'
alias ...='cd ../..'

alias cal='gcal'

#thefuck
#alias fuck='TF_CMD=$(TF_ALIAS=fuck PYTHONIOENCODING=utf-8 TF_SHELL_ALIASES=$(alias) /cygdrive/c/Users/`whoami`/AppData/Local/Programs/Python/Python35-32/Scripts/thefuck.exe $(fc -ln -1)) && eval $TF_CMD && history -s $TF_CMD' #native windows installation
eval "$(thefuck --alias)"

# Editor/pager setup inspired by/stolen from: https://github.com/rtomayko/dotfiles
HAVE_VIM=$(command -v vim)
# EDITOR
if [ -n "$HAVE_VIM" ]; then
	EDITOR=vim
else
	EDITOR=vi
fi
export EDITOR

# PAGER
if [ -n "$(command -v less)" ]; then
	PAGER="less -iW -x4"
	MANPAGER="less -isW -x4"
else
	PAGER=more
	MANPAGER="$PAGER"
fi
export PAGER MANPAGER


# Allows shadowing default git commands
function do_git {
	local cmd=$1
	shift

	if [ "$cmd" == "status" ]; then
		cmd="statuscm"
	elif [ "$cmd" == "push" ]; then
		#Q-Free specific
		if [[ "$(pwd -P)" == /cygdrive/c/Users/ethanp/git/opentms* ]]; then
			cmd="pushpr"
		fi 
	elif [ "$cmd" == "checkout" ]; then
		# My post-checkout hook calls git status, the first half of which is just checkout's usual output
		# So this forces checkout to run as quiet
		cmd="checkout --progress -q" 
	fi

	# use hub if it's available
	# this replaces eval "$(hub alias -s)" since I use custom commands
	if type hub >/dev/null 2>&1 && [ "$cmd" != "stash" ]; then
		hub $cmd "$@"
	else 
		"$(which git)" $cmd "$@"
	fi
}
alias git='do_git'

# Map g to git status and g <arg> to git <arg>
function g {
	if [[ $# > 0  ]]; then
		git $@
	else
		git status
	fi
}

# Check Hook Up's FB in terminal real quick
alias hookup='links m.facebook.com/TheHookUpCafe'

# ignore backups, CVS directories, python bytecode, vim swap files for tab completion
FIGNORE="~:CVS:#:.pyc:.swp:.swa:apache-solr-*"

FCEDIT='vim'

function md5check(){
	md5sum -c - <<<"$(cat $1.md5) $1" 
}

function sumcheck(){
	# general sum checker, takes sum_type and file as args
	# assumes sum is named file.sumtype

	# currently just treats everything like md5
	md5check "$2"
}

function ascii_to_hex(){
	echo -n "$1" | xxd -p | sed 's/.\{2\}/& /g'
}

### MOVE OUT TO WINDOWS/CYGWIN SPECIFIC BASHRC ###
alias open='cygstart' # move out to Windows-only .bashrc/.zshrc

# write a script/function to handle multiple ahk scripts more gracefully
# need to consider scripts that have to be loaded in a particular order
#	best solution there may just be execution files that source them in the right order
AHK_DIR="${HOME}/ahk"
for file in $AHK_DIR/*.ahk; do
	if [[ -x "$file" ]]; then
		open "$file"
	fi
done

function clip(){
	cat "$1" > /dev/clipboard
}
alias paste='cat /dev/clipboard'

# Ctrl-V paste into Cygwin (also needs the following line in .intputrc)
# "\C-v": paste-from-clipboard
stty lnext ^q stop undef start undef

build_path() { # uses local variables to not pollute shell namespace
	#TODO: need to loop this over the path variables

	local GHC_BIN="/cygdrive/c/Program Files/Haskell Platform/7.10.3/bin"
	[[ ":$PATH:" != *":$GHC_BIN:"* ]] && export PATH="$PATH:$GHC_BIN"

	local NODEJS="/cygdrive/c/Program Files/nodejs"
	[[ ":$PATH:" != *":$NODEJS:"* ]] && export PATH="$PATH:$NODEJS"

	local NPM="/cygdrive/c/Users/ethanp/AppData/Roaming/npm"
	[[ ":$PATH:" != *":$NPM:"* ]] && export PATH="$PATH:$NPM"

	# remove the function from the namespace also
	unset -f $FUNCNAME 
}
build_path

PS1="\[\e]0;\w\a\]\n\[\e[32m\]\u@\h:\! \[\e[33m\]\w\[\e[0m\]\n\$ "

# Q-FREE specific

alias perlcol="perl -F'/' -lane 'print \"@F[-4..-1]\"' | column -t"

# end Q-FREE specific

PATH="/home/ethanp/perl5/bin${PATH:+:${PATH}}"; export PATH;
PERL5LIB="/home/ethanp/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"; export PERL5LIB;
PERL_LOCAL_LIB_ROOT="/home/ethanp/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"; export PERL_LOCAL_LIB_ROOT;
PERL_MB_OPT="--install_base \"/home/ethanp/perl5\""; export PERL_MB_OPT;
PERL_MM_OPT="INSTALL_BASE=/home/ethanp/perl5"; export PERL_MM_OPT;
